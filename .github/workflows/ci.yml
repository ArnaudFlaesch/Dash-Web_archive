name: Node.js CI

on: ["push"]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.18.0

      - uses: actions/cache@v2
        with:
          path: |
            - ~/.npm
            - ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: |
          npm ci
          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull database image
        run: |
          docker pull postgres:13.2-alpine
          docker run -p 5432:5432 -d -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=dash_test postgres:13.2-alpine

      - name: Pull backend image
        run: |
          if [[ "$(git ls-remote --heads https://github.com/ArnaudFlaesch/Dash-WebServices ${GITHUB_REF#refs/*/} | wc -l)" == 1 && ${GITHUB_REF#refs/*/} != 'master' && ${GITHUB_REF#refs/*/} != 'master' ]]; then
            docker pull arnaudf93/dashwebservices:${GITHUB_REF#refs/*/}
            docker run -p 8080:8080 -d --network="host" -e POSTGRES_URL=jdbc:postgresql://localhost:5432/dash_test arnaudf93/dashwebservices:${GITHUB_REF#refs/*/}
          else 
            docker pull arnaudf93/dashwebservices:latest
            docker run -p 8080:8080 -d --network="host" -e POSTGRES_URL=jdbc:postgresql://localhost:5432/dash_test arnaudf93/dashwebservices:latest
          fi

      - name: Lint
        run: |
          npm run lint:styles:report
          npm run eslint

      - name: Build
        run: |
          echo REACT_APP_FRONTEND_URL=${{ secrets.REACT_APP_FRONTEND_URL }} >> .env.production
          echo REACT_APP_BACKEND_URL=${{ secrets.REACT_APP_BACKEND_URL }} >> .env.production
          echo REACT_APP_OPENWEATHERMAP_KEY=${{ secrets.REACT_APP_OPENWEATHERMAP_KEY }} >> .env.production
          echo REACT_APP_STRAVA_CLIENT_ID=${{ secrets.REACT_APP_STRAVA_CLIENT_ID }} >> .env.production
          echo REACT_APP_STRAVA_CLIENT_SECRET=${{ secrets.REACT_APP_STRAVA_CLIENT_SECRET }} >> .env.production
          echo REACT_APP_STEAM_USER_ID=${{ secrets.REACT_APP_STEAM_USER_ID }} >> .env.production
          echo REACT_APP_STEAM_API_KEY=${{ secrets.REACT_APP_STEAM_API_KEY }} >> .env.production
          npm run build

      - name: Deploy with gh-pages
        if: success() && github.ref != 'refs/heads/master'
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          npx gh-pages-clean
          npx gh-pages -b website -d build -u "github-actions-bot <support+actions@github.com>"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test
        run: npm run ci

      - name: Generate test report
        if: always()
        run: |
          mkdir cypress/screenshots || true
          npm run report:merge
          npm run report:generate
          npm run report:copyScreenshots

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Cypress report
          path: cypress/reports/html

      - name: Snyk report
        if: success() && github.ref == 'refs/heads/master'
        run: |
          npx snyk auth ${{ secrets.SNYK_TOKEN }}
          npx snyk test --json-file-output=snyk-report.json || true
          npx snyk-to-html -i snyk-report.json -o snyk-report.html

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Snyk report
          path: snyk-report.html

      - name: Generate coverage
        run: |
          mkdir coverage-reports || true && mkdir .nyc_output || true
          cp cypress-coverage/coverage-final.json coverage-reports/from-cypress.json
          cp jest-coverage/coverage-final.json coverage-reports/from-jest.json
          npx nyc merge coverage-reports && mv coverage.json .nyc_output/out.json
          npx nyc report --reporter=lcov --reporter=clover --report-dir coverage

      - name: Send coverage report
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov 
          chmod +x codecov
          ./codecov -t ${{ secrets.CODECOV_TOKEN }}
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage/clover.xml --project-token ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
